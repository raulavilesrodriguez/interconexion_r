tabsetPanel(
id = "tabset",
tabPanel("Empresas Telecom",
sidebarLayout(
sidebarPanel(
selectInput('setdata', 'BD Super Compañías',
choices = c("General Histórico"="1",
"Por Empresa"="2")),
selectInput('parametro', 'Parámetro', choices = NULL),
selectInput('servicio', 'Servicio', choices = unique(info_fin_tr$servicios)),
textOutput('mediana')
),
mainPanel(
textOutput('titulo_gráfico'),
plotOutput('plot_general_1'),
plotOutput('plot_general_2')
)
),
fluidRow(
column(12,titlePanel(textOutput("titulo_tabla"))),
column(12, DT::dataTableOutput("my_tabla"))
)
),
tabPanel("Análisis Costo")
)
)
server <- function(input, output, session) {
output$panel <- renderText({
paste("Pestaña Actual:", input$tabset)
})
data_1 <- reactive({
req(input$setdata) #to be known
tibble(datos_1[[as.numeric(input$setdata)]])
})
# Tables totals
observeEvent(data_1(),
if(colnames(data_1())[1]=="servicios"){
string <- reactive(paste0('HISTÓRICO INGRESOS, COSTOS Y GASTOS'))
output$titulo_tabla <- renderText(string())
freezeReactiveValue(input, 'parametro')
updateSelectInput(session, "parametro", choices = colnames(data_1()[-c(1,2)]))
show("servicio")
output$my_tabla <- DT::renderDataTable(data_1()|> filter(servicios == input$servicio) |>
select(any_of('servicios'), any_of('año'), any_of(input$parametro)), rownames = FALSE)
output$plot_general_2 <- NULL
hide('plot_general_2')
show('plot_general_1')
output$plot_general_1 <- renderPlot({
req(data_1(), cancelOutput = TRUE)
req(input$servicio, cancelOutput = TRUE)
req(input$parametro, cancelOutput = TRUE)
ggplot(data_1()|> filter(.data[['servicios']] == input$servicio), aes(.data[['año']], .data[[input$parametro]])) +
geom_point(position = ggforce::position_auto())
}, res = 96)
output$mediana <- NULL
}
else{
string <- reactive(paste0('POR EMPRESA COSTOS Y GASTOS'))
output$titulo_tabla <- renderText(string())
freezeReactiveValue(input, 'parametro')
updateSelectInput(session, "parametro", choices = colnames(data_1())[-c(1,2,17)])
output$my_tabla <- DT::renderDataTable(data_1()|>
select(any_of('NOMBRE'), any_of(input$parametro)), rownames = FALSE)
hide("servicio")
output$plot_general_1 <- NULL
hide('plot_general_1')
show('plot_general_2')
output$plot_general_2 <- renderPlot({
req(data_1())
req(input$parametro)
ggplot(data_1(), aes(log10(.data[[input$parametro]]))) +
geom_density(fill="#E94560")
})
mediana <- reactive(data_1()[[input$parametro]] |> median())
output$mediana <- renderText({
paste0("El valor representativo de ", input$parametro, " es: ", round(mediana(), digits = 2))})
}
)
}
shinyApp(ui, server)
}
itxApp()
source("C:/Users/bravi/projects/interconexion_r/impact_itx.R", echo=TRUE)
mi_vector <- c('sai_con', 'stf_con', 'avs_con', 'sma_con',
'portador_con', 'tronc_con', 'satelite_con', 'espacial_con')
'sai_con' %in% mi_vector
itxApp <- function(){
ui <- fluidPage(
useShinyjs(),
theme = bslib::bs_theme(bootswatch = "sandstone"),
titlePanel('', windowTitle = "AIR_ITX"),
HTML(r"(
<h1 style="text-align:center">AIR DE INTERCONEXIÓN Y ACCESO</h1>
<h6 style="color:#FC2947;">
<a style="text-decoration: none"
target="_blank"
href="https://raulaviles.netlify.app/">
Designed by: Byron Raúl Avilés Rodríguez
</a>
</h6>
)"),
textOutput("panel"),
HTML(r"(<br>)"),
tabsetPanel(
id = "tabset",
tabPanel("Empresas Telecom",
sidebarLayout(
sidebarPanel(
selectInput('setdata', 'BD Super Compañías',
choices = c("General Histórico"="1",
"Por Empresa"="2")),
selectInput('parametro', 'Parámetro', choices = NULL),
selectInput('servicio', 'Servicio', choices = unique(info_fin_tr$servicios)),
textOutput('mediana')
),
mainPanel(
textOutput('titulo_gráfico'),
plotOutput('plot_general_1'),
plotOutput('plot_general_2')
)
),
fluidRow(
column(12,titlePanel(textOutput("titulo_tabla"))),
column(12, DT::dataTableOutput("my_tabla"))
)
),
tabPanel("Análisis Costo")
)
)
server <- function(input, output, session) {
output$panel <- renderText({
paste("Pestaña Actual:", input$tabset)
})
data_1 <- reactive({
req(input$setdata) #to be known
tibble(datos_1[[as.numeric(input$setdata)]])
})
# Tables totals
observeEvent(data_1(),
if(colnames(data_1())[1]=="servicios"){
string <- reactive(paste0('HISTÓRICO INGRESOS, COSTOS Y GASTOS'))
output$titulo_tabla <- renderText(string())
freezeReactiveValue(input, 'parametro')
updateSelectInput(session, "parametro", choices = colnames(data_1()[-c(1,2)]))
show("servicio")
output$my_tabla <- DT::renderDataTable(data_1()|> filter(servicios == input$servicio) |>
select(any_of('servicios'), any_of('año'), any_of(input$parametro)), rownames = FALSE)
output$plot_general_2 <- NULL
hide('plot_general_2')
show('plot_general_1')
output$plot_general_1 <- renderPlot({
req(data_1(), cancelOutput = TRUE)
req(input$servicio, cancelOutput = TRUE)
req(input$parametro, cancelOutput = TRUE)
ggplot(data_1()|> filter(.data[['servicios']] == input$servicio), aes(.data[['año']], .data[[input$parametro]])) +
geom_point(position = ggforce::position_auto())
}, res = 96)
output$mediana <- NULL
}
else{
string <- reactive(paste0('POR EMPRESA COSTOS Y GASTOS'))
output$titulo_tabla <- renderText(string())
freezeReactiveValue(input, 'parametro')
updateSelectInput(session, "parametro", choices = colnames(data_1())[-c(1,2,17)])
output$my_tabla <- DT::renderDataTable(data_1()|>
select(any_of('NOMBRE'), any_of(input$parametro)), rownames = FALSE)
hide("servicio")
output$plot_general_1 <- NULL
hide('plot_general_1')
show('plot_general_2')
output$plot_general_2 <- renderPlot({
req(data_1())
req(input$parametro)
ggplot(data_1(), aes(log10(.data[[input$parametro]]))) +
geom_density(fill="#E94560")
})
mi_vector <- c('sai_con', 'stf_con', 'avs_con', 'sma_con',
'portador_con', 'tronc_con', 'satelite_con', 'espacial_con')
if(input$parametro %in% mi_vector){
total_conexiones <- reactive(data_1()[[input$parametro]] |> sum())
output$mediana <- renderText({
paste0("La suma de conexiones de ", input$parametro, " es: ", round(total_conexiones()))})
}
else{
mediana <- reactive(data_1()[[input$parametro]] |> median())
output$mediana <- renderText({
paste0("El valor representativo de ", input$parametro, " es: ", round(mediana(), digits = 2))})
}
}
)
}
shinyApp(ui, server)
}
itxApp()
itxApp <- function(){
ui <- fluidPage(
useShinyjs(),
theme = bslib::bs_theme(bootswatch = "sandstone"),
titlePanel('', windowTitle = "AIR_ITX"),
HTML(r"(
<h1 style="text-align:center">AIR DE INTERCONEXIÓN Y ACCESO</h1>
<h6 style="color:#FC2947;">
<a style="text-decoration: none"
target="_blank"
href="https://raulaviles.netlify.app/">
Designed by: Byron Raúl Avilés Rodríguez
</a>
</h6>
)"),
textOutput("panel"),
HTML(r"(<br>)"),
tabsetPanel(
id = "tabset",
tabPanel("Empresas Telecom",
sidebarLayout(
sidebarPanel(
selectInput('setdata', 'BD Super Compañías',
choices = c("General Histórico"="1",
"Por Empresa"="2")),
selectInput('parametro', 'Parámetro', choices = NULL),
selectInput('servicio', 'Servicio', choices = unique(info_fin_tr$servicios)),
textOutput('mediana')
),
mainPanel(
textOutput('titulo_gráfico'),
plotOutput('plot_general_1'),
plotOutput('plot_general_2')
)
),
fluidRow(
column(12,titlePanel(textOutput("titulo_tabla"))),
column(12, DT::dataTableOutput("my_tabla"))
)
),
tabPanel("Análisis Costo")
)
)
server <- function(input, output, session) {
output$panel <- renderText({
paste("Pestaña Actual:", input$tabset)
})
data_1 <- reactive({
req(input$setdata) #to be known
tibble(datos_1[[as.numeric(input$setdata)]])
})
# Tables totals
observeEvent(data_1(),
if(colnames(data_1())[1]=="servicios"){
string <- reactive(paste0('HISTÓRICO INGRESOS, COSTOS Y GASTOS'))
output$titulo_tabla <- renderText(string())
freezeReactiveValue(input, 'parametro')
updateSelectInput(session, "parametro", choices = colnames(data_1()[-c(1,2)]))
show("servicio")
output$my_tabla <- DT::renderDataTable(data_1()|> filter(servicios == input$servicio) |>
select(any_of('servicios'), any_of('año'), any_of(input$parametro)), rownames = FALSE)
output$plot_general_2 <- NULL
hide('plot_general_2')
show('plot_general_1')
output$plot_general_1 <- renderPlot({
req(data_1(), cancelOutput = TRUE)
req(input$servicio, cancelOutput = TRUE)
req(input$parametro, cancelOutput = TRUE)
ggplot(data_1()|> filter(.data[['servicios']] == input$servicio), aes(.data[['año']], .data[[input$parametro]])) +
geom_point(position = ggforce::position_auto())
}, res = 96)
output$mediana <- NULL
}
else{
string <- reactive(paste0('POR EMPRESA COSTOS Y GASTOS'))
output$titulo_tabla <- renderText(string())
freezeReactiveValue(input, 'parametro')
updateSelectInput(session, "parametro", choices = colnames(data_1())[-c(1,2,17)])
output$my_tabla <- DT::renderDataTable(data_1()|>
select(any_of('NOMBRE'), any_of(input$parametro)), rownames = FALSE)
hide("servicio")
output$plot_general_1 <- NULL
hide('plot_general_1')
show('plot_general_2')
output$plot_general_2 <- renderPlot({
req(data_1())
req(input$parametro)
ggplot(data_1(), aes(log10(.data[[input$parametro]]))) +
geom_density(fill="#E94560")
})
mi_vector <- c('sai_con', 'stf_con', 'avs_con', 'sma_con',
'portador_con', 'tronc_con', 'satelite_con', 'espacial_con')
if(input$parametro %in% mi_vector){
total_conexiones <- reactive(data_1()[[input$parametro]] |> sum())
output$mediana <- renderText({
paste0("La suma de conexiones de ", input$parametro, " es: ", round(total_conexiones()))})
}
mediana <- reactive(data_1()[[input$parametro]] |> median())
output$mediana <- renderText({
paste0("El valor representativo de ", input$parametro, " es: ", round(mediana(), digits = 2))})
}
)
}
shinyApp(ui, server)
}
itxApp()
itxApp <- function(){
ui <- fluidPage(
useShinyjs(),
theme = bslib::bs_theme(bootswatch = "sandstone"),
titlePanel('', windowTitle = "AIR_ITX"),
HTML(r"(
<h1 style="text-align:center">AIR DE INTERCONEXIÓN Y ACCESO</h1>
<h6 style="color:#FC2947;">
<a style="text-decoration: none"
target="_blank"
href="https://raulaviles.netlify.app/">
Designed by: Byron Raúl Avilés Rodríguez
</a>
</h6>
)"),
textOutput("panel"),
HTML(r"(<br>)"),
tabsetPanel(
id = "tabset",
tabPanel("Empresas Telecom",
sidebarLayout(
sidebarPanel(
selectInput('setdata', 'BD Super Compañías',
choices = c("General Histórico"="1",
"Por Empresa"="2")),
selectInput('parametro', 'Parámetro', choices = NULL),
selectInput('servicio', 'Servicio', choices = unique(info_fin_tr$servicios)),
textOutput('mediana')
),
mainPanel(
textOutput('titulo_gráfico'),
plotOutput('plot_general_1'),
plotOutput('plot_general_2')
)
),
fluidRow(
column(12,titlePanel(textOutput("titulo_tabla"))),
column(12, DT::dataTableOutput("my_tabla"))
)
),
tabPanel("Análisis Costo")
)
)
server <- function(input, output, session) {
output$panel <- renderText({
paste("Pestaña Actual:", input$tabset)
})
data_1 <- reactive({
req(input$setdata) #to be known
tibble(datos_1[[as.numeric(input$setdata)]])
})
# Tables totals
observeEvent(data_1(),
if(colnames(data_1())[1]=="servicios"){
string <- reactive(paste0('HISTÓRICO INGRESOS, COSTOS Y GASTOS'))
output$titulo_tabla <- renderText(string())
freezeReactiveValue(input, 'parametro')
updateSelectInput(session, "parametro", choices = colnames(data_1()[-c(1,2)]))
show("servicio")
output$my_tabla <- DT::renderDataTable(data_1()|> filter(servicios == input$servicio) |>
select(any_of('servicios'), any_of('año'), any_of(input$parametro)), rownames = FALSE)
output$plot_general_2 <- NULL
hide('plot_general_2')
show('plot_general_1')
output$plot_general_1 <- renderPlot({
req(data_1(), cancelOutput = TRUE)
req(input$servicio, cancelOutput = TRUE)
req(input$parametro, cancelOutput = TRUE)
ggplot(data_1()|> filter(.data[['servicios']] == input$servicio), aes(.data[['año']], .data[[input$parametro]])) +
geom_point(position = ggforce::position_auto())
}, res = 96)
#output$mediana <- NULL
}
else{
string <- reactive(paste0('POR EMPRESA COSTOS Y GASTOS'))
output$titulo_tabla <- renderText(string())
freezeReactiveValue(input, 'parametro')
updateSelectInput(session, "parametro", choices = colnames(data_1())[-c(1,2,17)])
output$my_tabla <- DT::renderDataTable(data_1()|>
select(any_of('NOMBRE'), any_of(input$parametro)), rownames = FALSE)
hide("servicio")
output$plot_general_1 <- NULL
hide('plot_general_1')
show('plot_general_2')
output$plot_general_2 <- renderPlot({
req(data_1())
req(input$parametro)
ggplot(data_1(), aes(log10(.data[[input$parametro]]))) +
geom_density(fill="#E94560")
})
mi_vector <- c('sai_con', 'stf_con', 'avs_con', 'sma_con',
'portador_con', 'tronc_con', 'satelite_con', 'espacial_con')
if(input$parametro %in% mi_vector){
total_conexiones <- reactive(data_1()[[input$parametro]] |> sum())
output$mediana <- renderText({
paste0("La suma de conexiones de ", input$parametro, " es: ", round(total_conexiones()))})
}
mediana <- reactive(data_1()[[input$parametro]] |> median())
output$mediana <- renderText({
paste0("El valor representativo de ", input$parametro, " es: ", round(mediana(), digits = 2))})
}
)
}
shinyApp(ui, server)
}
itxApp()
itxApp <- function(){
ui <- fluidPage(
useShinyjs(),
theme = bslib::bs_theme(bootswatch = "sandstone"),
titlePanel('', windowTitle = "AIR_ITX"),
HTML(r"(
<h1 style="text-align:center">AIR DE INTERCONEXIÓN Y ACCESO</h1>
<h6 style="color:#FC2947;">
<a style="text-decoration: none"
target="_blank"
href="https://raulaviles.netlify.app/">
Designed by: Byron Raúl Avilés Rodríguez
</a>
</h6>
)"),
textOutput("panel"),
HTML(r"(<br>)"),
tabsetPanel(
id = "tabset",
tabPanel("Empresas Telecom",
sidebarLayout(
sidebarPanel(
selectInput('setdata', 'BD Super Compañías',
choices = c("General Histórico"="1",
"Por Empresa"="2")),
selectInput('parametro', 'Parámetro', choices = NULL),
selectInput('servicio', 'Servicio', choices = unique(info_fin_tr$servicios)),
textOutput('mediana')
),
mainPanel(
textOutput('titulo_gráfico'),
plotOutput('plot_general_1'),
plotOutput('plot_general_2')
)
),
fluidRow(
column(12,titlePanel(textOutput("titulo_tabla"))),
column(12, DT::dataTableOutput("my_tabla"))
)
),
tabPanel("Análisis Costo")
)
)
server <- function(input, output, session) {
output$panel <- renderText({
paste("Pestaña Actual:", input$tabset)
})
data_1 <- reactive({
req(input$setdata) #to be known
tibble(datos_1[[as.numeric(input$setdata)]])
})
# Tables totals
observeEvent(data_1(),
if(colnames(data_1())[1]=="servicios"){
string <- reactive(paste0('HISTÓRICO INGRESOS, COSTOS Y GASTOS'))
output$titulo_tabla <- renderText(string())
freezeReactiveValue(input, 'parametro')
updateSelectInput(session, "parametro", choices = colnames(data_1()[-c(1,2)]))
show("servicio")
output$my_tabla <- DT::renderDataTable(data_1()|> filter(servicios == input$servicio) |>
select(any_of('servicios'), any_of('año'), any_of(input$parametro)), rownames = FALSE)
output$plot_general_2 <- NULL
hide('plot_general_2')
show('plot_general_1')
output$plot_general_1 <- renderPlot({
req(data_1(), cancelOutput = TRUE)
req(input$servicio, cancelOutput = TRUE)
req(input$parametro, cancelOutput = TRUE)
ggplot(data_1()|> filter(.data[['servicios']] == input$servicio), aes(.data[['año']], .data[[input$parametro]])) +
geom_point(position = ggforce::position_auto())
}, res = 96)
output$mediana <- NULL
}
else{
string <- reactive(paste0('POR EMPRESA COSTOS Y GASTOS'))
output$titulo_tabla <- renderText(string())
freezeReactiveValue(input, 'parametro')
updateSelectInput(session, "parametro", choices = colnames(data_1())[-c(1,2,17)])
output$my_tabla <- DT::renderDataTable(data_1()|>
select(any_of('NOMBRE'), any_of(input$parametro)), rownames = FALSE)
hide("servicio")
output$plot_general_1 <- NULL
hide('plot_general_1')
show('plot_general_2')
output$plot_general_2 <- renderPlot({
req(data_1())
req(input$parametro)
ggplot(data_1(), aes(log10(.data[[input$parametro]]))) +
geom_density(fill="#E94560")
})
mi_vector <- c('sai_con', 'stf_con', 'avs_con', 'sma_con',
'portador_con', 'tronc_con', 'satelite_con', 'espacial_con')
#if(input$parametro %in% mi_vector){
#  total_conexiones <- reactive(data_1()[[input$parametro]] |> sum())
#  output$mediana <- renderText({
#    paste0("La suma de conexiones de ", input$parametro, " es: ", round(total_conexiones()))})
#}
mediana <- reactive(data_1()[[input$parametro]] |> median())
output$mediana <- renderText({
paste0("El valor representativo de ", input$parametro, " es: ", round(mediana(), digits = 2))})
}
)
}
shinyApp(ui, server)
}
itxApp()
