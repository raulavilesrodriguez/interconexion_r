output$mediana <- renderText({
paste0(filtrado_texto(), input$parametro, " es: ", round(filtrado_valor(), digits = 2))})
}
)
data_total <- reactive({
tibble(
indicador= c('ingresos', 'costos_gastos'),
valores_USD = c(input$median_income_u*median_conexiones*nrow(teleco_eeff)*input$prob,
input$median_cost_u*median_conexiones*nrow(teleco_eeff)*input$prob*(1-input$var_itx-input$var_acceso))
)
})
utilidad <- reactive({data_total()[['valores_USD']][1]-data_total()[['valores_USD']][2]})
data_total_i <- reactive({
data_total() |> add_row(indicador = 'utilidad', valores_USD = utilidad())
})
beneficio_estado <- reactive({
ifelse(data_total_i()[['valores_USD']][3] > 0, data_total_i()[['valores_USD']][3]*0.25, 0)})
data_total_f <- reactive({
data_total_i() |> add_row(indicador = 'Beneficios Estado', valores_USD = beneficio_estado())
})
output$table_final <- renderTable(data_total_f())
output$num_empresas <- renderText({
paste0('No. Empresas beneficiadas: ', round(nrow(teleco_eeff)*input$prob))
})
output$plot_resultado <- renderPlot({
req(data_total_f()) |> mutate(indicador = (reorder(.data[['indicador']], - .data[['valores_USD']]))) |>
ggplot(aes(.data[['indicador']], .data[['valores_USD']], fill = .data[['valores_USD']])) +
geom_col() +
geom_text(aes(label= round(.data[['valores_USD']])), vjust= -0.25, color='#E7B10A')
})
}
shinyApp(ui, server)
}
itxApp()
itxApp <- function(){
ui <- fluidPage(
useShinyjs(),
theme = bslib::bs_theme(bootswatch = "sandstone"),
titlePanel('', windowTitle = "AIR_ITX"),
HTML(r"(
<h1 style="text-align:center">AIR DE INTERCONEXIÓN Y ACCESO</h1>
<h6 style="color:#FC2947;">
<a style="text-decoration: none"
target="_blank"
href="https://raulaviles.netlify.app/">
Designed by: Byron Raúl Avilés Rodríguez
</a>
</h6>
)"),
textOutput("panel"),
HTML(r"(<br>)"),
tabsetPanel(
id = "tabset",
tabPanel("Empresas Telecom",
sidebarLayout(
sidebarPanel(
selectInput('setdata', 'BD Super Compañías',
choices = c("General Histórico"="1",
"Por Empresa"="2")),
selectInput('parametro', 'Parámetro', choices = NULL),
selectInput('servicio', 'Servicio', choices = unique(info_fin_tr$servicios)),
span(textOutput('mediana'), style="font-weight:bold;
font-family:sans-serif; color:#77037B"),
),
mainPanel(
textOutput('titulo_gráfico'),
plotOutput('plot_general_1'),
plotOutput('plot_general_2')
)
),
fluidRow(
column(12,titlePanel(textOutput("titulo_tabla"))),
column(12, DT::dataTableOutput("my_tabla"))
)
),
tabPanel("Análisis Impacto",
sidebarLayout(
sidebarPanel(
sliderInput('prob', 'Probabilidad (Función de distribución acumulativa CDF', value = probabilidad, min = 0, max = 1),
numericInput('median_cost_u', 'Costo por Conexión', value = round(median_cost_u, 2), step = 0.1),
numericInput('median_income_u', 'Ingreso por Conexión', value = round(median_income_u, 2), step = 0.1),
sliderInput('var_itx', 'Porcentaje de cambio Itx', value = 0, min = 0, max = 0.2),
sliderInput('var_acceso', 'Porcentaje de cambio Acceso', value = 0, min = 0, max = 0.2),
),
mainPanel(
textOutput('num_empresas'),
HTML(r"(<br>)"),
plotOutput('plot_resultado'),
HTML(r"(<br>)"),
tableOutput('table_final')
)
))
)
)
server <- function(input, output, session) {
output$panel <- renderText({
paste("Pestaña Actual:", input$tabset)
})
data_1 <- reactive({
req(input$setdata) #to be known
tibble(datos_1[[as.numeric(input$setdata)]])
})
# Tables totals
observeEvent(data_1(),
if(colnames(data_1())[1]=="servicios"){
string <- reactive(paste0('HISTÓRICO INGRESOS, COSTOS Y GASTOS'))
output$titulo_tabla <- renderText(string())
freezeReactiveValue(input, 'parametro')
updateSelectInput(session, "parametro", choices = colnames(data_1()[-c(1,2)]))
show("servicio")
output$my_tabla <- DT::renderDataTable(data_1()|> filter(servicios == input$servicio) |>
select(any_of('servicios'), any_of('año'), any_of(input$parametro)), rownames = FALSE)
output$plot_general_2 <- NULL
hide('plot_general_2')
show('plot_general_1')
output$plot_general_1 <- renderPlot({
req(data_1(), cancelOutput = TRUE)
req(input$servicio, cancelOutput = TRUE)
req(input$parametro, cancelOutput = TRUE)
ggplot(data_1()|> filter(.data[['servicios']] == input$servicio), aes(.data[['año']], .data[[input$parametro]])) +
geom_point(position = ggforce::position_auto(), color = '#FF5403')
}, res = 96)
output$mediana <- NULL
}
else{
string <- reactive(paste0('POR EMPRESA COSTOS Y GASTOS'))
output$titulo_tabla <- renderText(string())
freezeReactiveValue(input, 'parametro')
updateSelectInput(session, "parametro", choices = colnames(data_1())[-c(1,2,17)])
output$my_tabla <- DT::renderDataTable(data_1()|>
select(any_of('NOMBRE'), any_of(input$parametro)), rownames = FALSE)
hide("servicio")
output$plot_general_1 <- NULL
hide('plot_general_1')
show('plot_general_2')
output$plot_general_2 <- renderPlot({
req(data_1())
req(input$parametro)
ggplot(data_1(), aes(log10(.data[[input$parametro]]))) +
geom_density(fill="#E94560")
})
mi_vector <- c('sai_con', 'stf_con', 'avs_con', 'sma_con',
'portador_con', 'tronc_con', 'satelite_con', 'espacial_con', 'con_total')
filtrado_valor <- reactive({
if(input$parametro %in% mi_vector){
data_1()[[input$parametro]] |> sum()
}
else{
data_1()[[input$parametro]] |> median()
}
})
filtrado_texto <- reactive({
if(input$parametro %in% mi_vector){
paste("La suma de conexiones de ")
}
else{
paste("El valor de la mediana de ")
}
})
output$mediana <- renderText({
paste0(filtrado_texto(), input$parametro, " es: ", round(filtrado_valor(), digits = 2))})
}
)
data_total <- reactive({
tibble(
indicador= c('ingresos', 'costos_gastos'),
valores_USD = c(input$median_income_u*median_conexiones*nrow(teleco_eeff)*input$prob,
input$median_cost_u*median_conexiones*nrow(teleco_eeff)*input$prob*(1-input$var_itx-input$var_acceso))
)
})
utilidad <- reactive({data_total()[['valores_USD']][1]-data_total()[['valores_USD']][2]})
data_total_i <- reactive({
data_total() |> add_row(indicador = 'utilidad', valores_USD = utilidad())
})
beneficio_estado <- reactive({
ifelse(data_total_i()[['valores_USD']][3] > 0, data_total_i()[['valores_USD']][3]*0.25, 0)})
data_total_f <- reactive({
data_total_i() |> add_row(indicador = 'Beneficios Estado', valores_USD = beneficio_estado())
})
output$table_final <- renderTable(data_total_f())
output$num_empresas <- renderText({
paste0('No. Empresas beneficiadas: ', round(nrow(teleco_eeff)*input$prob))
})
output$plot_resultado <- renderPlot({
req(data_total_f()) |> mutate(indicador = (reorder(.data[['indicador']], - .data[['valores_USD']]))) |>
ggplot(aes(.data[['indicador']], .data[['valores_USD']], fill = .data[['valores_USD']])) +
geom_col() +
geom_text(aes(label= round(.data[['valores_USD']])), vjust= -0.25, color='#E7B10A')
})
}
shinyApp(ui, server)
}
itxApp()
itxApp <- function(){
ui <- fluidPage(
useShinyjs(),
theme = bslib::bs_theme(bootswatch = "sandstone"),
titlePanel('', windowTitle = "AIR_ITX"),
HTML(r"(
<h1 style="text-align:center">AIR DE INTERCONEXIÓN Y ACCESO</h1>
<h6 style="color:#FC2947;">
<a style="text-decoration: none"
target="_blank"
href="https://raulaviles.netlify.app/">
Designed by: Byron Raúl Avilés Rodríguez
</a>
</h6>
)"),
textOutput("panel"),
HTML(r"(<br>)"),
tabsetPanel(
id = "tabset",
tabPanel("Empresas Telecom",
sidebarLayout(
sidebarPanel(
selectInput('setdata', 'BD Super Compañías',
choices = c("General Histórico"="1",
"Por Empresa"="2")),
selectInput('parametro', 'Parámetro', choices = NULL),
selectInput('servicio', 'Servicio', choices = unique(info_fin_tr$servicios)),
span(textOutput('mediana'), style="font-weight:bold;
font-family:sans-serif; color:#77037B"),
),
mainPanel(
textOutput('titulo_gráfico'),
plotOutput('plot_general_1'),
plotOutput('plot_general_2')
)
),
fluidRow(
column(12,titlePanel(textOutput("titulo_tabla"))),
column(12, DT::dataTableOutput("my_tabla"))
)
),
tabPanel("Análisis Impacto",
sidebarLayout(
sidebarPanel(
sliderInput('prob', 'Probabilidad Función de distribución acumulativa CDF', value = probabilidad, min = 0, max = 1),
numericInput('median_cost_u', 'Costo por Conexión', value = round(median_cost_u, 2), step = 0.1),
numericInput('median_income_u', 'Ingreso por Conexión', value = round(median_income_u, 2), step = 0.1),
sliderInput('var_itx', 'Porcentaje de cambio Itx', value = 0, min = 0, max = 0.2),
sliderInput('var_acceso', 'Porcentaje de cambio Acceso', value = 0, min = 0, max = 0.2),
),
mainPanel(
textOutput('num_empresas'),
HTML(r"(<br>)"),
plotOutput('plot_resultado'),
HTML(r"(<br>)"),
tableOutput('table_final')
)
))
)
)
server <- function(input, output, session) {
output$panel <- renderText({
paste("Pestaña Actual:", input$tabset)
})
data_1 <- reactive({
req(input$setdata) #to be known
tibble(datos_1[[as.numeric(input$setdata)]])
})
# Tables totals
observeEvent(data_1(),
if(colnames(data_1())[1]=="servicios"){
string <- reactive(paste0('HISTÓRICO INGRESOS, COSTOS Y GASTOS'))
output$titulo_tabla <- renderText(string())
freezeReactiveValue(input, 'parametro')
updateSelectInput(session, "parametro", choices = colnames(data_1()[-c(1,2)]))
show("servicio")
output$my_tabla <- DT::renderDataTable(data_1()|> filter(servicios == input$servicio) |>
select(any_of('servicios'), any_of('año'), any_of(input$parametro)), rownames = FALSE)
output$plot_general_2 <- NULL
hide('plot_general_2')
show('plot_general_1')
output$plot_general_1 <- renderPlot({
req(data_1(), cancelOutput = TRUE)
req(input$servicio, cancelOutput = TRUE)
req(input$parametro, cancelOutput = TRUE)
ggplot(data_1()|> filter(.data[['servicios']] == input$servicio), aes(.data[['año']], .data[[input$parametro]])) +
geom_point(position = ggforce::position_auto(), color = '#FF5403')
}, res = 96)
output$mediana <- NULL
}
else{
string <- reactive(paste0('POR EMPRESA COSTOS Y GASTOS'))
output$titulo_tabla <- renderText(string())
freezeReactiveValue(input, 'parametro')
updateSelectInput(session, "parametro", choices = colnames(data_1())[-c(1,2,17)])
output$my_tabla <- DT::renderDataTable(data_1()|>
select(any_of('NOMBRE'), any_of(input$parametro)), rownames = FALSE)
hide("servicio")
output$plot_general_1 <- NULL
hide('plot_general_1')
show('plot_general_2')
output$plot_general_2 <- renderPlot({
req(data_1())
req(input$parametro)
ggplot(data_1(), aes(log10(.data[[input$parametro]]))) +
geom_density(fill="#E94560")
})
mi_vector <- c('sai_con', 'stf_con', 'avs_con', 'sma_con',
'portador_con', 'tronc_con', 'satelite_con', 'espacial_con', 'con_total')
filtrado_valor <- reactive({
if(input$parametro %in% mi_vector){
data_1()[[input$parametro]] |> sum()
}
else{
data_1()[[input$parametro]] |> median()
}
})
filtrado_texto <- reactive({
if(input$parametro %in% mi_vector){
paste("La suma de conexiones de ")
}
else{
paste("El valor de la mediana de ")
}
})
output$mediana <- renderText({
paste0(filtrado_texto(), input$parametro, " es: ", round(filtrado_valor(), digits = 2))})
}
)
data_total <- reactive({
tibble(
indicador= c('ingresos', 'costos_gastos'),
valores_USD = c(input$median_income_u*median_conexiones*nrow(teleco_eeff)*input$prob,
input$median_cost_u*median_conexiones*nrow(teleco_eeff)*input$prob*(1-input$var_itx-input$var_acceso))
)
})
utilidad <- reactive({data_total()[['valores_USD']][1]-data_total()[['valores_USD']][2]})
data_total_i <- reactive({
data_total() |> add_row(indicador = 'utilidad', valores_USD = utilidad())
})
beneficio_estado <- reactive({
ifelse(data_total_i()[['valores_USD']][3] > 0, data_total_i()[['valores_USD']][3]*0.25, 0)})
data_total_f <- reactive({
data_total_i() |> add_row(indicador = 'Beneficios Estado', valores_USD = beneficio_estado())
})
output$table_final <- renderTable(data_total_f())
output$num_empresas <- renderText({
paste0('No. Empresas beneficiadas: ', round(nrow(teleco_eeff)*input$prob))
})
output$plot_resultado <- renderPlot({
req(data_total_f()) |> mutate(indicador = (reorder(.data[['indicador']], - .data[['valores_USD']]))) |>
ggplot(aes(.data[['indicador']], .data[['valores_USD']], fill = .data[['valores_USD']])) +
geom_col() +
geom_text(aes(label= round(.data[['valores_USD']])), vjust= -0.25, color='#E7B10A')
})
}
shinyApp(ui, server)
}
itxApp()
itxApp <- function(){
ui <- fluidPage(
useShinyjs(),
theme = bslib::bs_theme(bootswatch = "sandstone"),
titlePanel('', windowTitle = "AIR_ITX"),
HTML(r"(
<h1 style="text-align:center">AIR DE INTERCONEXIÓN Y ACCESO</h1>
<h6 style="color:#FC2947;">
<a style="text-decoration: none"
target="_blank"
href="https://raulaviles.netlify.app/">
Designed by: Byron Raúl Avilés Rodríguez
</a>
</h6>
)"),
textOutput("panel"),
HTML(r"(<br>)"),
tabsetPanel(
id = "tabset",
tabPanel("Empresas Telecom",
sidebarLayout(
sidebarPanel(
selectInput('setdata', 'BD Super Compañías',
choices = c("General Histórico"="1",
"Por Empresa"="2")),
selectInput('parametro', 'Parámetro', choices = NULL),
selectInput('servicio', 'Servicio', choices = unique(info_fin_tr$servicios)),
span(textOutput('mediana'), style="font-weight:bold;
font-family:sans-serif; color:#77037B"),
),
mainPanel(
textOutput('titulo_gráfico'),
plotOutput('plot_general_1'),
plotOutput('plot_general_2')
)
),
fluidRow(
column(12,titlePanel(textOutput("titulo_tabla"))),
column(12, DT::dataTableOutput("my_tabla"))
)
),
tabPanel("Análisis Impacto",
sidebarLayout(
sidebarPanel(
sliderInput('prob', 'Probabilidad Función de distribución acumulativa CDF', value = probabilidad, min = 0, max = 1),
numericInput('median_cost_u', 'Costo por Conexión', value = round(median_cost_u, 2), step = 0.1),
numericInput('median_income_u', 'Ingreso por Conexión', value = round(median_income_u, 2), step = 0.1),
sliderInput('var_itx', 'Porcentaje de cambio Itx', value = 0, min = 0, max = 0.2),
sliderInput('var_acceso', 'Porcentaje de cambio Acceso', value = 0, min = 0, max = 0.2),
),
mainPanel(
textOutput('num_empresas'),
HTML(r"(<br>)"),
plotOutput('plot_resultado'),
HTML(r"(<br>)"),
tableOutput('table_final')
)
))
)
)
server <- function(input, output, session) {
output$panel <- renderText({
paste("Pestaña Actual:", input$tabset)
})
data_1 <- reactive({
req(input$setdata) #to be known
tibble(datos_1[[as.numeric(input$setdata)]])
})
# Tables totals
observeEvent(data_1(),
if(colnames(data_1())[1]=="servicios"){
string <- reactive(paste0('HISTÓRICO INGRESOS, COSTOS Y GASTOS'))
output$titulo_tabla <- renderText(string())
freezeReactiveValue(input, 'parametro')
updateSelectInput(session, "parametro", choices = colnames(data_1()[-c(1,2)]))
show("servicio")
output$my_tabla <- DT::renderDataTable(data_1()|> filter(servicios == input$servicio) |>
select(any_of('servicios'), any_of('año'), any_of(input$parametro)), rownames = FALSE)
output$plot_general_2 <- NULL
hide('plot_general_2')
show('plot_general_1')
output$plot_general_1 <- renderPlot({
req(data_1(), cancelOutput = TRUE)
req(input$servicio, cancelOutput = TRUE)
req(input$parametro, cancelOutput = TRUE)
ggplot(data_1()|> filter(.data[['servicios']] == input$servicio), aes(.data[['año']], .data[[input$parametro]])) +
geom_point(position = ggforce::position_auto(), color = '#FF5403')
}, res = 96)
output$mediana <- NULL
}
else{
string <- reactive(paste0('POR EMPRESA COSTOS Y GASTOS'))
output$titulo_tabla <- renderText(string())
freezeReactiveValue(input, 'parametro')
updateSelectInput(session, "parametro", choices = colnames(data_1())[-c(1,2,17)])
output$my_tabla <- DT::renderDataTable(data_1()|>
select(any_of('NOMBRE'), any_of(input$parametro)), rownames = FALSE)
hide("servicio")
output$plot_general_1 <- NULL
hide('plot_general_1')
show('plot_general_2')
output$plot_general_2 <- renderPlot({
req(data_1())
req(input$parametro)
ggplot(data_1(), aes(log10(.data[[input$parametro]]))) +
geom_density(fill="#E94560")
})
mi_vector <- c('sai_con', 'stf_con', 'avs_con', 'sma_con',
'portador_con', 'tronc_con', 'satelite_con', 'espacial_con', 'con_total')
filtrado_valor <- reactive({
if(input$parametro %in% mi_vector){
data_1()[[input$parametro]] |> sum()
}
else{
data_1()[[input$parametro]] |> median()
}
})
filtrado_texto <- reactive({
if(input$parametro %in% mi_vector){
paste("La suma de conexiones de ")
}
else{
paste("El valor de la mediana de ")
}
})
output$mediana <- renderText({
paste0(filtrado_texto(), input$parametro, " es: ", round(filtrado_valor(), digits = 2))})
}
)
data_total <- reactive({
tibble(
indicador= c('ingresos', 'costos_gastos'),
valores_USD = c(input$median_income_u*median_conexiones*nrow(teleco_eeff)*input$prob,
input$median_cost_u*median_conexiones*nrow(teleco_eeff)*input$prob*(1-input$var_itx-input$var_acceso))
)
})
utilidad <- reactive({data_total()[['valores_USD']][1]-data_total()[['valores_USD']][2]})
data_total_i <- reactive({
data_total() |> add_row(indicador = 'utilidad', valores_USD = utilidad())
})
beneficio_estado <- reactive({
ifelse(data_total_i()[['valores_USD']][3] > 0, data_total_i()[['valores_USD']][3]*0.25, 0)})
data_total_f <- reactive({
data_total_i() |> add_row(indicador = 'Beneficios Estado', valores_USD = beneficio_estado())
})
output$table_final <- renderTable(data_total_f())
output$num_empresas <- renderText({
paste0('No. Empresas beneficiadas: ', round(nrow(teleco_eeff)*input$prob))
})
output$plot_resultado <- renderPlot({
req(data_total_f()) |> mutate(indicador = (reorder(.data[['indicador']], - .data[['valores_USD']]))) |>
ggplot(aes(.data[['indicador']], .data[['valores_USD']], fill = .data[['valores_USD']])) +
geom_col() +
geom_text(aes(label= round(.data[['valores_USD']]), fontface = 'bold'), vjust= -0.25, color='#E7B10A')
})
}
shinyApp(ui, server)
}
itxApp()
View(teleco_eeff)
